# Dockerfile
########################################################################################
# Maintainer:
#	- Jason Moss
#
# Created: 
#	- 6/23/2021
########################################################################################
FROM ubuntu-iso:18.04.5 AS base_os_ubuntu-18.04.5-user_v2021.1
LABEL author="Jason Moss"

# Address build bug: https://github.com/docker/docker/issues/4032
ENV DEBIAN_FRONTEND=noninteractive

# Turn on shell command expansion inside docker container IF Debug is configured
ARG BUILD_DEBUG

RUN if [ $BUILD_DEBUG -ne 0 ]; then set -x; fi \
# Configure APT to ignore recommended or suggested packages by default to keep the final image small \
	&& echo "APT::Install-Recommends false;" > /etc/apt/apt.conf.d/00norecommends \
	&& echo "APT::AutoRemove::RecommendsImportant false;" >> /etc/apt/apt.conf.d/00norecommends \
	&& echo "APT::Install-Suggests false;" > /etc/apt/apt.conf.d/00nosuggests \
	&& echo "APT::AutoRemove::SuggestsImportant false;" >> /etc/apt/apt.conf.d/00nosuggests \
	&& apt-get update \
# Install apt-utils which is needed by debconf for some of the other packages being installed \
	&& apt-get install -y \
		apt-utils \
# Install vim for local file editing \
		vim \
# Install and setup locale \
	&& apt-get install locales \
	&& locale-gen en_US.UTF-8 \
	&& dpkg-reconfigure \
		--frontend $DEBIAN_FRONTEND locales

# Install debconf-utils, dialog \
 RUN if [ $BUILD_DEBUG -ne 0 ]; then set -x; fi \
 	&& apt-get install -y \
# Install pre-reqs on server ISO for dialog utilities \
		software-properties-common \
	&& add-apt-repository universe \
	&& apt-get update \
	&& apt-get install -y \
 		dialog \
 		debconf-utils \
# Put debconf in non interactive mode \
 	&& echo 'debconf debconf/frontend select Noninteractive' | debconf-set-selections

# Create a user account with no password and add user to sudoers
# Install sudo and setup a user account, which is essential for Yocto and other tools
# adduser command:  http://manpages.ubuntu.com/manpages/xenial/man8/adduser.8.html
# Arguments can be filled at build time using the '--build-arg' option
ARG USER_ACCT
ARG HOME_DIR
ARG XLNX_INSTALL_LOCATION

RUN if [ $BUILD_DEBUG -ne 0 ]; then set -x; fi \
	&& apt-get install -y \
		sudo \
	&& adduser \
		--disabled-password \
		--gecos '' \
		--shell /bin/bash \
		--home $HOME_DIR \
		$USER_ACCT \
	&& echo \
		"$USER_ACCT ALL=(ALL) NOPASSWD: ALL" \
		>> /etc/sudoers \
# Add user to the dialout group for serial port access \
	&& adduser $USER_ACCT dialout \
# Setup Java librxtx permission for /var/lock so Vitis can user the /dev/ttyUSB devices properly without crashing \
# Add current user to uucp group \
	&& adduser $USER_ACCT uucp \
# Give uucp group permission to /var/lock \
	&& chgrp uucp /var/lock \
# Give write permission to the group \
	&& chmod g+w /var/lock \
# Set BASH as the default shell \
	&& echo "dash dash/sh boolean false" | debconf-set-selections \
	&& DEBIAN_FRONTEND=$DEBIAN_FRONTEND dpkg-reconfigure dash

########################################################################################
# Base Ubuntu Configuration for Xilinx Tool Install
# -------------------------------------------------
########################################################################################
FROM base_os_ubuntu-18.04.5-user_v2021.1 AS xilinx_install_ubuntu-18.04.5-user_v2021.1
LABEL author="Jason Moss"

# Re-use previous stage ARG
ARG USER_ACCT
ARG HOME_DIR

# Switch to the user account
USER $USER_ACCT
ENV DEBIAN_FRONTEND=noninteractive

# Arguments can be filled at build time using the '--build-arg' option
ARG XLNX_INSTALL_LOCATION
ARG INSTALL_SERVER_URL

# Turn on shell command expansion inside docker container IF Debug is configured
ARG BUILD_DEBUG

# Setup install location folder permissions
RUN if [ $BUILD_DEBUG -ne 0 ]; then set -x; fi \
	&& mkdir -p $XLNX_INSTALL_LOCATION/tmp \
	&& cd $XLNX_INSTALL_LOCATION/tmp \
# add i386 architecture for zlib1g-dev dependency \
	&& sudo dpkg --add-architecture i386 \
	&& sudo apt-get update \
	&& sudo apt-get install -y \
	&& sudo apt-get install -y \
######################################################################################## \
# Xilinx Petalinux Dependencies: \
######################################################################################## \
	  	tofrodos \
	  	iproute2 \
		gawk \
		xvfb \
		git \
		make \
		net-tools \
		libncurses5-dev \
# Note: Python2 is requried, Python3 is included by default with Ubuntu 18 \
		python \
# Install update-inetd for tftpd \
	  	update-inetd \
	  	tftpd \
		zlib1g-dev:i386 \
	  	libssl-dev \
	  	flex \
	  	bison \
	  	libselinux1 \
	  	gnupg \
	  	wget \
		diffstat \
		chrpath \
		socat \
		xterm \
		autoconf \
		libtool \
		libtool-bin \
# Use BSDTAR vs.  TAR due to issues in docker container \
		tar \
	  	unzip \
	  	texinfo \
		zlib1g-dev \
		gcc-multilib \
		build-essential \
		libsdl1.2-dev \
		libglib2.0-dev \
		screen \
		pax \
		gzip \
# python3-gi is used by bitbake's dependency explorer \
		python3-gi \
# undocumented dependencies \
		less \
		lsb-release \
		fakeroot \
		libgtk2.0-0 \
		libgtk2.0-dev \
# yocto depedencies (for petalinux) \
		cpio \
		rsync \
		xorg \
# dependency for autoinstall of petalinux \
		expect \
# used to strip windows line terminations from autoinstall scripts in powershell \
		dos2unix \
# Added 9.27.2019 for RFSoC ZCU111 Build Support \
		idn \
# Already Installed \
#		sudo \
#		locales \
#		git \
# Dependencies for GIT SSH support from container \
		openssh-client\
		openssh-client-ssh1 \
# Add minicom for /dev/ttyUSB* access from command line \
	 	minicom \
# Added for v2021.1 settings.sh script \
		bc \
######################################################################################## \
# Xilinx Unified Installer Dependencies: \
######################################################################################## \
# JRE is required by the Eclipse Standard Widget Toolkit (SWT) \
		default-jre \
######################################################################################## \
# Xilinx Vitis Dependencies from installLibs.sh script post-installation: \
######################################################################################## \
# AIE Tools \
		libc6-dev-i386 \
		net-tools \
		graphviz \
# Vitis \
		unzip \
		g++ \
		libtinfo5 \
# For v++ flow \
	&& sudo ln -s /usr/bin/make /usr/bin/gmake \
######################################################################################## \
# Xilinx Vivado Dependencies: \
# from ldd-recursive.pl script \
######################################################################################## \
	&& sudo apt-get install -y \
# derived from the perl 'ldd-recursive.pl' script \
# NOTE: This has been deprecated in libboost - the correct version is included with the vivado installation \
#	 	libboost-signals-dev \ 
	 	google-perftools \
# Libgtk required for Xilinx SDK \
		libgtk2.0-0 \
######################################################################################## \
# Xilinx Vitis Dependencies: \
######################################################################################## \
# Installer hangs at post install stage if these aren't installed \
# ---------------------------- \
# Failure to install QEMU data \
# Setting it up...Failed to replace perl. Relocate script failed. Abort!, stderr: \
# xargs: file: No such file or directory \
# ---------------------------- \
# Requires 'file' to be installed \
	 	file \
# petalinux-gblibc-x86_64-petalinux-image-minimal-aarch64-toolchain.sh requires this in post install
	 	gcc \
# Vitis fails to load libswt-pi4-gtk: \
# ----------------------------------- \
		libswt-gtk-4-jni \
		libswt-gtk-4-java \
# ######################################################################################## \
# # Xilinx Vitis OpenCL Installable Client Driver Loader Dependencies: \
# ######################################################################################## \
 		ocl-icd-libopencl1 \
 		opencl-headers \
 		ocl-icd-opencl-dev \
######################################################################################## \
# Additional Tools \	
######################################################################################## \
# X-org required for docker container windowing in host OS \
		xorg \
		xterm \
# Development tools \
		git \
		wget \
# Compression support \
		tar \
		gzip \
		unzip \
# dependency for autoinstall of petalinux \
		expect \
# used to strip windows line terminations from autoinstall scripts in powershell \
		dos2unix \
# Add minicom for /dev/ttyUSB* access from command line \
	 	minicom \
# Uncovered during OpenAMP Pre-built Example Generation \
	 	libidn11 \
# Non-required packages for productivity \
	 	xvfb \
######################################################################################## \
# Xilinx Vitis AI Repository Dependencies: \
######################################################################################## \
		parted \
# ######################################################################################## \
# # v2021.1 XRTDEPS.SH Dependencies for Vitis: \
# # https://github.com/Xilinx/XRT/blob/2021.1/src/runtime_src/tools/scripts/xrtdeps.sh
# ######################################################################################## \
# ub_package_list() \
# {
#    UB_LIST=(\
 	    cmake \
    	cppcheck \
#     	curl \
     	dkms \
#       g++ \
#     	gcc \
	    gdb \
#     	git \
     	gnuplot \
#     	graphviz \
     	libboost-dev \
     	libboost-filesystem-dev \
     	libboost-program-options-dev \
     	libcurl4-openssl-dev \
     	libdrm-dev \
     	libgtest-dev \
     	libjpeg-dev \
     	libjson-glib-dev \
#     	libncurses5-dev \
		libopencv-core-dev \
		libpng-dev \
		libprotoc-dev \
		libssl-dev \
		libsystemd-dev \
		libtiff5-dev \
		libudev-dev \
		libyaml-dev \
		linux-libc-dev \
		lm-sensors \
		lsb-release \
		make \
		ocl-icd-dev \
		ocl-icd-libopencl1 \
		ocl-icd-opencl-dev \
		opencl-headers \
		pciutils \
		perl \
		rapidjson-dev \
		pkg-config \
		protobuf-compiler \
		python3 \
		libpython3-dev \
		python3-breathe \
		python3-pip \
		python3-sphinx \
		python3-sphinx-rtd-theme \
		sphinx-common \
		strace \
		unzip \
		uuid-dev 
#    } \
# ######################################################################################## \
# # Xilinx DocNav Dependencies: \
# ######################################################################################## \
# 	 	lib32stdc++6 \
# 	 	libgtk2.0-0:i386 \
# 	 	libfontconfig1:i386 \
# 	 	libx11-6:i386 \
# 	 	libext6:i386 \
# 	 	libxrender1:i386 \
# 	 	libsm6:i386 \
# 	 	libqtgui4:i386 \

ARG GIT_USER_NAME
ARG GIT_USER_EMAIL

# Setup GIT with a dummy username and email address
RUN if [ $BUILD_DEBUG -ne 0 ]; then set -x; fi \
	&& git config \
	--global user.name $GIT_USER_NAME \
	&& git config \
	--global user.email $GIT_USER_EMAIL \
	&& git config \
	--global color.ui true \
# Setup the User Locale \
# Yocto requires a 'UTF-8' locale \
# Xilinx tools specifically require the 'en_US.UTF-8' locale \
	&& echo "export LANG=en_US.UTF-8" >> $HOME_DIR/.bashrc \
	&& export "LANG=en_US.UTF-8"

# Arguments can be filled at build time using the '--build-arg' option
ARG KEYBOARD_CONFIG_FILE
ARG XTERM_CONFIG_FILE
ARG MINICOM_CONFIG_FILE

RUN if [ $BUILD_DEBUG -ne 0 ]; then set -x; fi \
	&& export TERM=xterm \
	&& cd $XLNX_INSTALL_LOCATION/tmp \
# Get Keyboard configuration file \
	&& mkdir -p "${KEYBOARD_CONFIG_FILE%/*}" \
	&& wget -nv $INSTALL_SERVER_URL/$KEYBOARD_CONFIG_FILE -O $KEYBOARD_CONFIG_FILE \
	&& cat $KEYBOARD_CONFIG_FILE \
# Configure Keyboard silently \
	&& sudo DEBIAN_FRONTEND=$DEBIAN_FRONTEND apt-get install -y keyboard-configuration \
	&& sudo DEBIAN_FRONTEND=$DEBIAN_FRONTEND debconf-set-selections < $KEYBOARD_CONFIG_FILE \
	&& sudo DEBIAN_FRONTEND=$DEBIAN_FRONTEND dpkg-reconfigure keyboard-configuration \
# Configure Xterm to change the color scheme and allow copy-paste with host \
	&& mkdir -p "${XTERM_CONFIG_FILE%/*}" \
	&& wget -nv $INSTALL_SERVER_URL/$XTERM_CONFIG_FILE -O $XTERM_CONFIG_FILE \
	&& cat $XTERM_CONFIG_FILE \
	&& cp $XTERM_CONFIG_FILE $HOME_DIR \
# Copy Minicom configuration file \
	&& mkdir -p "${MINICOM_CONFIG_FILE%/*}" \
	&& wget -nv $INSTALL_SERVER_URL/$MINICOM_CONFIG_FILE -O $MINICOM_CONFIG_FILE \
	&& cat $MINICOM_CONFIG_FILE \
	&& cp $MINICOM_CONFIG_FILE $HOME_DIR

# Cleanup apt cache and temporary files to reduce image size
RUN if [ $BUILD_DEBUG -ne 0 ]; then set -x; fi \
	&& sudo apt-get clean \
	&& sudo rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/* \
	&& sudo echo 'debconf debconf/frontend select Dialog' | sudo debconf-set-selections

